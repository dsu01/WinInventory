<UserControl x:Class="Client.Views.FacilitiesView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Client.Views"
             xmlns:cal="http://www.caliburnproject.org"
             xmlns:Controls="clr-namespace:DevComponents.WPF.Controls;assembly=DevComponents.WPF.Controls"
             xmlns:wpfEditors="clr-namespace:DevComponents.WpfEditors;assembly=DevComponents.WpfEditors"
             xmlns:framework="clr-namespace:Client.Framework"
             xmlns:converters="clr-namespace:Client.Converters"
             xmlns:controls="clr-namespace:Client.Controls"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             cal:Bind.Model="{Binding}">

    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
        <converters:FacilityToHeaderConverter x:Key="FacilityToHeaderConverter" />

        <HierarchicalDataTemplate x:Key="TreeNodeTemplate" ItemsSource="{Binding Children}">
            <HierarchicalDataTemplate.Resources>
                <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                    <Setter Property="FontFamily" Value="Segoe UI" />
                    <Setter Property="FontFamily" Value="Tahoma" />
                    <Setter Property="FontSize" Value="12" />
                    <Setter Property="Padding" Value="1 3 5 3" />
                    <Setter Property="HorizontalAlignment" Value="Left" />
                </Style>
            </HierarchicalDataTemplate.Resources>
            <StackPanel Orientation="Horizontal">
                <Image x:Name="TreeNodeImage"  Width="16" Height="16" Margin="3,0" />
                <TextBlock x:Name="TreeNodeLabel" Foreground="Black" Text="{Binding Path=Value, Converter={StaticResource FacilityToHeaderConverter}}" />
            </StackPanel>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Path=TreeNodeType}" Value="{x:Static framework:TreeNodeType.Site}" >
                    <Setter TargetName="TreeNodeImage" Property="Source" Value="../../../Resources/Images/folder_16x16.gif" />
                    <Setter TargetName="TreeNodeLabel" Property="Text" Value="{Binding Path=Value}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=TreeNodeType}" Value="{x:Static framework:TreeNodeType.Building}" >
                    <Setter TargetName="TreeNodeImage" Property="Source" Value="../../../Resources/Images/folder_16x16.gif" />
                    <Setter TargetName="TreeNodeLabel" Property="Text" Value="{Binding Path=Value}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=TreeNodeType}" Value="{x:Static framework:TreeNodeType.SystemGroup}" >
                    <Setter TargetName="TreeNodeImage" Property="Source" Value="../../../Resources/Images/folder_16x16.gif" />
                    <Setter TargetName="TreeNodeLabel" Property="Text" Value="{Binding Path=Value}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=TreeNodeType}" Value="{x:Static framework:TreeNodeType.SystemGroupType}" >
                    <Setter TargetName="TreeNodeImage" Property="Source" Value="../../../Resources/Images/folder_16x16.gif" />
                    <Setter TargetName="TreeNodeLabel" Property="Text" Value="{Binding Path=Value}" />
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=TreeNodeType}" Value="{x:Static framework:TreeNodeType.System}" />
                        <Condition Binding="{Binding Path=IsOpen}" Value="false" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="TreeNodeImage" Property="Source" Value="../../../Resources/Images/FI_16x16.png" />
                    <Setter TargetName="TreeNodeLabel" Property="FontWeight" Value="Bold" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=TreeNodeType}" Value="{x:Static framework:TreeNodeType.System}" />
                        <Condition Binding="{Binding Path=IsOpen}" Value="true" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="TreeNodeImage" Property="Source" Value="../../../Resources/Images/FI_16x16.png" />
                    <Setter TargetName="TreeNodeLabel" Property="FontWeight" Value="Bold" />
                </MultiDataTrigger>

                <!--<MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=TreeNodeType}" Value="{x:Static framework:TreeNodeType.Equipment}" />
                        <Condition Binding="{Binding Path=IsOpen}" Value="false" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="TreeNodeImage" Property="Source" Value="../../../Resources/Images/AI_16x16.png" />
                    <Setter TargetName="TreeNodeLabel" Property="FontWeight" Value="Bold" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=TreeNodeType}" Value="{x:Static framework:TreeNodeType.Equipment}" />
                        <Condition Binding="{Binding Path=IsOpen}" Value="true" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="TreeNodeImage" Property="Source" Value="../../../Resources/Images/Open_16x16.png" />
                    <Setter TargetName="TreeNodeLabel" Property="FontWeight" Value="Bold" />
                </MultiDataTrigger>-->

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=TreeNodeType}" Value="{x:Static framework:TreeNodeType.Component}" />
                        <Condition Binding="{Binding Path=IsOpen}" Value="false" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="TreeNodeImage" Property="Source" Value="../../../Resources/Images/SI_16x16.png" />
                    <Setter TargetName="TreeNodeLabel" Property="FontWeight" Value="Bold" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=TreeNodeType}" Value="{x:Static framework:TreeNodeType.Component}" />
                        <Condition Binding="{Binding Path=IsOpen}" Value="true" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="TreeNodeImage" Property="Source" Value="../../../Resources/Images/SI_16x16.png" />
                    <Setter TargetName="TreeNodeLabel" Property="FontWeight" Value="Bold" />
                </MultiDataTrigger>
            </DataTemplate.Triggers>
        </HierarchicalDataTemplate>

        <Style TargetType="{x:Type TreeView}">
            <Setter Property="ItemTemplate" Value="{StaticResource TreeNodeTemplate}" />
            <Setter Property="ItemContainerStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type TreeViewItem}">
                        <Setter Property="IsExpanded" Value="True" />
                        <Setter Property="ItemsSource" Value="{Binding Children}" />
                        <Setter Property="cal:Message.Attach" Value="[Event Selected] = [Action SelectFacility($dataContext,$eventArgs)]; [Event MouseDoubleClick] = [Action OpenFacility($dataContext,$eventArgs)]" />
                        <Setter Property="Tag" Value="{Binding DataContext,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}}" />
                        <Setter Property="ContextMenu">
                            <Setter.Value>
                                <ContextMenu DataContext="{Binding Path=PlacementTarget.Tag,RelativeSource={x:Static RelativeSource.Self}}">
                                    <MenuItem Header="Open" cal:Message.Attach="OpenFacility($dataContext)" IsEnabled="{Binding CanActivateInstitution, Mode=OneWay}" />
                                    <MenuItem Header="Delete" cal:Message.Attach="OpenFacility($dataContext)" IsEnabled="{Binding CanDeleteInstitution, Mode=OneWay}" />
                                    <MenuItem Header="Add Component" cal:Message.Attach="OpenFacility($dataContext)" IsEnabled="{Binding CanAddFormerInstitution, Mode=OneWay}" />
                                </ContextMenu>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                        </Style.Triggers>
                    </Style>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="{ComponentResourceKey {x:Type Controls:ButtonResources}, {x:Static Controls:ButtonResources.ButtonNormalInnerBorderBrushKey}}" Color="Transparent" />
        <SolidColorBrush x:Key="{ComponentResourceKey {x:Type Controls:ButtonResources}, {x:Static Controls:ButtonResources.ButtonHoverBorderBrushKey}}" Color="Transparent" />
        <SolidColorBrush x:Key="{ComponentResourceKey {x:Type Controls:ButtonResources}, {x:Static Controls:ButtonResources.ButtonHoverInnerBorderBrushKey}}" Color="Transparent" />
        <SolidColorBrush x:Key="{ComponentResourceKey {x:Type Controls:ButtonResources}, {x:Static Controls:ButtonResources.ButtonCheckedBorderBrushKey}}" Color="Transparent" />
        <SolidColorBrush x:Key="{ComponentResourceKey {x:Type Controls:ButtonResources}, {x:Static Controls:ButtonResources.ButtonCheckedInnerBorderBrushKey}}" Color="Transparent" />
        <SolidColorBrush x:Key="{ComponentResourceKey {x:Type Controls:ButtonResources}, {x:Static Controls:ButtonResources.ButtonPressedBorderBrushKey}}" Color="Transparent" />
        <SolidColorBrush x:Key="{ComponentResourceKey {x:Type Controls:ButtonResources}, {x:Static Controls:ButtonResources.ButtonPressedInnerBorderBrushKey}}" Color="Transparent" />
    </UserControl.Resources>

    <UserControl.ContextMenu>
        <ContextMenu DataContext="{Binding Path=PlacementTarget.DataContext,RelativeSource={x:Static RelativeSource.Self}}">
            <MenuItem Header="Add" cal:Message.Attach="AddInstitution" IsEnabled="{Binding CanAddInstitution, Mode=OneWay}" />
        </ContextMenu>
    </UserControl.ContextMenu>

    <Grid KeyboardNavigation.TabNavigation="Cycle">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Grid Grid.Row="1" >
            <controls:CommandBar Margin="5 0" >
                <TextBlock Text="Filter:" VerticalAlignment="Center" x:Name="SearchStringTitle" />
                <TextBox Text="" VerticalAlignment="Center" x:Name="SearchString" TextWrapping="Wrap" Width="200"/>
                <Separator Style="{StaticResource CmdBarSeparatorStyle}" />
                <Button x:Name="Refresh" Width="80" MinWidth="45" Style="{StaticResource CommandBarButtonStyle}" ToolTip="Refresh Facilities" >
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Refresh" />
                        <Image Source="/Resources/Images/ButtonImages/arrow_refresh.png" Height="16" Width="25" />
                    </StackPanel>
                </Button>
            </controls:CommandBar>
        </Grid>

        <wpfEditors:SuperTabControl ControlBoxTabMenuVisibility="Visible" TabStripPlacement="Bottom" Margin="4" Grid.Row="2">
            <wpfEditors:SuperTabItem Header="Facilities" IsSelected="{Binding IsFacilitiesSelected, Mode=TwoWay}" ToolTip="Facilities" AutomationProperties.Name="">
                <TreeView ItemsSource="{Binding Facilities}" />
            </wpfEditors:SuperTabItem>
            <wpfEditors:SuperTabItem Header="Search" IsSelected="{Binding IsSearchSelected, Mode=TwoWay}" ToolTip="Search" AutomationProperties.Name="">
                <TextBlock Text="Search" />
            </wpfEditors:SuperTabItem>
            <wpfEditors:SuperTabItem Header="E Systems" IsSelected="{Binding IsElectricalSystemsSelected, Mode=TwoWay}" ToolTip="Electrical Systems" AutomationProperties.Name="">
                <TreeView ItemsSource="{Binding ElectricalSystems}" />
            </wpfEditors:SuperTabItem>
            <wpfEditors:SuperTabItem Header="M Systems" IsSelected="False" ToolTip="Mechanical Systems" AutomationProperties.Name="">
                <TreeView ItemsSource="{Binding MechanicalSystems}" />
            </wpfEditors:SuperTabItem>
            <wpfEditors:SuperTabItem Header="E Equipments" IsSelected="False" ToolTip="Electrical Equipments" AutomationProperties.Name="">
                <TreeView ItemsSource="{Binding ElectricalEquipment}" />
            </wpfEditors:SuperTabItem>
            <wpfEditors:SuperTabItem Header="M Equipments" IsSelected="False" ToolTip="Electrical Equipments" AutomationProperties.Name="">
                <TreeView ItemsSource="{Binding MechanicalEquipment}" />
            </wpfEditors:SuperTabItem>
        </wpfEditors:SuperTabControl>
    </Grid>
</UserControl>

